% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clean_variable_names.r
\name{clean_variable_names}
\alias{clean_variable_names}
\title{Clean and rename variable names using AI-powered transformation}
\usage{
clean_variable_names(
  var_names,
  method = "rules",
  training_data = NULL,
  api_key = NULL,
  cache_results = TRUE,
  fallback_rules = TRUE
)
}
\arguments{
\item{var_names}{Character vector of variable names to clean}

\item{method}{Character; cleaning method to use:
- "rules": Use built-in pattern matching rules (default, fast)
- "ai_local": Use local AI model via ollama (requires ollama installation)
- "ai_openai": Use OpenAI API (requires API key in environment)
- "hybrid": Try rules first, then AI for unmatched names}

\item{training_data}{Optional data frame with columns 'abbrev_name' and 'table_name'
for custom training patterns. If NULL, uses built-in training data.}

\item{api_key}{Character; API key for AI services (if using ai_openai method)}

\item{cache_results}{Logical; if TRUE, caches AI results to avoid repeat calls}

\item{fallback_rules}{Logical; if TRUE, falls back to rule-based cleaning if AI fails}
}
\value{
Character vector of cleaned variable names, same length as input
}
\description{
This function transforms technical variable names into publication-ready,
human-readable names using pattern recognition and optional AI enhancement.
}
\examples{
\dontrun{
# Basic rule-based cleaning
vars <- c("demographics_age_tpx", "postop_ICU_LOS", "survival_30: Y")
clean_variable_names(vars)

# With AI enhancement
clean_variable_names(vars, method = "ai_local")

# Using custom training data
training <- read.csv("my_variable_mappings.csv")
clean_variable_names(vars, training_data = training)
}

}
